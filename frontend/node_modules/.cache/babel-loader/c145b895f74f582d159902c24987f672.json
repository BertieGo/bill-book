{"ast":null,"code":"import { message } from 'antd';\nimport { HOST } from '../../config/env';\n\nfunction toQueryString(paramsObject) {\n  return Object.keys(paramsObject).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(paramsObject[key])}`).join('&');\n}\n\nexport function post(url, data, msg) {\n  return fetch(HOST + url, {\n    body: JSON.stringify(data),\n    cache: 'no-cache',\n    headers: {\n      'content-type': 'application/json'\n    },\n    method: 'POST'\n  }).then(response => {\n    if (msg) {\n      message.success(msg);\n    }\n\n    return response.json();\n  });\n}\nexport function get(url, data, msg) {\n  let query = '';\n\n  if (data && typeof data === 'object' && Object.keys(data).length > 0) {\n    // @ts-ignore\n    query = `?${toQueryString(data)}`;\n  }\n\n  const _url = `${HOST}${url}${query}`;\n  return fetch(_url, {\n    cache: 'no-cache'\n  }).then(function (response) {\n    if (msg) {\n      message.success(msg);\n    }\n\n    return response.json();\n  });\n}","map":{"version":3,"sources":["/Users/huangwei/learn/x-mind/frontend/src/utils/request/index.ts"],"names":["message","HOST","toQueryString","paramsObject","Object","keys","map","key","encodeURIComponent","join","post","url","data","msg","fetch","body","JSON","stringify","cache","headers","method","then","response","success","json","get","query","length","_url"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,MAAtB;AAEA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,aAAT,CAAuBC,YAAvB,EAAoD;AAChD,SAAOC,MAAM,CACRC,IADE,CACGF,YADH,EAEFG,GAFE,CAEGC,GAAD,IAAkB,GAAEC,kBAAkB,CAACD,GAAD,CAAM,IAAGC,kBAAkB,CAACL,YAAY,CAACI,GAAD,CAAb,CAAoB,EAFvF,EAGFE,IAHE,CAGG,GAHH,CAAP;AAIH;;AAED,OAAO,SAASC,IAAT,CAAcC,GAAd,EAA2BC,IAA3B,EAAyCC,GAAzC,EAAuD;AAC1D,SAAOC,KAAK,CAACb,IAAI,GAAGU,GAAR,EAAa;AACrBI,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf,CADe;AAErBM,IAAAA,KAAK,EAAE,UAFc;AAGrBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHY;AAMrBC,IAAAA,MAAM,EAAE;AANa,GAAb,CAAL,CAOJC,IAPI,CAOCC,QAAQ,IAAI;AAChB,QAAIT,GAAJ,EAAS;AACLb,MAAAA,OAAO,CAACuB,OAAR,CAAgBV,GAAhB;AACH;;AACD,WAAOS,QAAQ,CAACE,IAAT,EAAP;AACH,GAZM,CAAP;AAaH;AAED,OAAO,SAASC,GAAT,CAAad,GAAb,EAA0BC,IAA1B,EAAyCC,GAAzC,EAAuD;AAE1D,MAAIa,KAAK,GAAG,EAAZ;;AAEA,MAAId,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoCR,MAAM,CAACC,IAAP,CAAYO,IAAZ,EAAkBe,MAAlB,GAA2B,CAAnE,EAAsE;AAClE;AACAD,IAAAA,KAAK,GAAI,IAAGxB,aAAa,CAACU,IAAD,CAAO,EAAhC;AACH;;AACD,QAAMgB,IAAI,GAAI,GAAE3B,IAAK,GAAEU,GAAI,GAAEe,KAAM,EAAnC;AAEA,SAAOZ,KAAK,CAACc,IAAD,EAAO;AAAEV,IAAAA,KAAK,EAAE;AAAT,GAAP,CAAL,CACFG,IADE,CACG,UAASC,QAAT,EAAmB;AACrB,QAAIT,GAAJ,EAAS;AACLb,MAAAA,OAAO,CAACuB,OAAR,CAAgBV,GAAhB;AACH;;AACD,WAAOS,QAAQ,CAACE,IAAT,EAAP;AACH,GANE,CAAP;AAOH","sourcesContent":["import {message} from 'antd';\nimport { IParamsObject } from '../../declare';\nimport { HOST } from '../../config/env';\n\nfunction toQueryString(paramsObject: IParamsObject) {\n    return Object\n        .keys(paramsObject)\n        .map((key: string) => `${encodeURIComponent(key)}=${encodeURIComponent(paramsObject[key])}`)\n        .join('&');\n}\n\nexport function post(url: string, data: Object, msg?: string) {\n    return fetch(HOST + url, {\n        body: JSON.stringify(data),\n        cache: 'no-cache',\n        headers: {\n            'content-type': 'application/json'\n        },\n        method: 'POST',\n    }).then(response => {\n        if (msg) {\n            message.success(msg);\n        }\n        return response.json()\n    })\n}\n\nexport function get(url: string, data?: Object, msg?: string) {\n\n    let query = '';\n\n    if (data && typeof data === 'object' && Object.keys(data).length > 0) {\n        // @ts-ignore\n        query = `?${toQueryString(data)}`;\n    }\n    const _url = `${HOST}${url}${query}`;\n\n    return fetch(_url, { cache: 'no-cache' })\n        .then(function(response) {\n            if (msg) {\n                message.success(msg);\n            }\n            return response.json();\n        })\n}\n"]},"metadata":{},"sourceType":"module"}